const playerImg = document.querySelector("#player-img");
const playerNameText = document.querySelector("#name");
const playerHPText = document.querySelector("#health");
const playerGoldText = document.querySelector("#gold");
const playerXPText = document.querySelector("#xp");
const playerLuckText = document.querySelector("#luck");
const currentWeaponText = document.querySelector("#weapon");
const monsterImg = document.querySelector("#monster-img");
const monsterNameText = document.querySelector("#monster-name");
const monsterHealthText = document.querySelector("#monster-health");
const monsterGoldText = document.querySelector("#monster-gold");
const monsterLevelText = document.querySelector("#monster-level");
const button1 = document.querySelector("#button1");
const button2 = document.querySelector("#button2");
const button3 = document.querySelector("#button3");
const gameLog = document.querySelector("#game-log");

const player = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞") || "–ò–≥—Ä–æ–∫";
let isOldWeaponSold = false;
let currentWeapon = 0;
let xp = 0;
let hp = 100;
let gold = 50;
let luck = 0;
let monsterHealth;
let monsterLevel;
let monsterGold;

const monsters = [
  {
    name: "–ü–µ—â–µ—Ä–Ω—ã–π –≥–æ–±–ª–∏–Ω",
    hp: 60,
    gold: 15,
    level: 5,
  },
  {
    name: "–õ–µ–¥—è–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç–∞–ª—å",
    hp: 135,
    gold: 40,
    level: 10,
  },
  {
    name: "–ß—ë—Ä–Ω—ã–π –¥—Ä–∞–∫–æ–Ω",
    hp: 340,
    gold: 185,
    level: 25,
  },
];

const weapons = [
  { name: "–ü–∞–ª–∫–∞", damage: 5 },
  { name: "–ö–∏–Ω–∂–∞–ª", damage: 10 },
  { name: "–î–≤—É—Ä—É—á–Ω—ã–π –º–µ—á", damage: 15 },
];

const locations = [
  {
    name: "–ì–æ—Ä–æ–¥",
    buttons_names: ["–ú–∞–≥–∞–∑–∏–Ω", "–¢–∞–≤–µ—Ä–Ω–∞", "–ü–æ–¥–∑–µ–º–µ–ª—å–µ"],
    buttons_actions: [goShop, goTavern, goDungeon],
    text: "–í—ã –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∏.",
  },
  {
    name: "–ú–∞–≥–∞–∑–∏–Ω",
    buttons_names: [
      "+10 –∑–¥–æ—Ä–æ–≤—å—è" + "\n" + "-10ü™ô",
      "–ö—É–ø–∏—Ç—å –æ—Ä—É–∂–∏–µ" + "\n" + "-50ü™ô",
      "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥",
    ],
    buttons_actions: [buyHealth, buyWeapon, goTown],
    text: "–í—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ.",
  },
  {
    name: "–¢–∞–≤–µ—Ä–Ω–∞",
    buttons_names: ["–í—ã–ø–∏—Ç—å —ç–ª—è", "–°—ã–≥—Ä–∞—Ç—å –≤ –∫–∞—Ä—Ç—ã", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥"],
    buttons_actions: [drinkBeer, playCards, goTown],
    text: "–í—ã –≤ —Ç–∞–≤–µ—Ä–Ω–µ.",
  },
  {
    name: "–ü–æ–¥–∑–µ–º–µ–ª—å–µ",
    buttons_names: [monsters[0].name, monsters[1].name, monsters[2].name],
    buttons_actions: [fightGoblin, fightElemental, fightDragon],
    text: "–í—ã –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞.",
  },
  {
    name: "–°—Ä–∞–∂–∞—Ç—å—Å—è",
    buttons_names: ["–ê—Ç–∞–∫–æ–≤–∞—Ç—å", "–£–≤–µ—Ä–Ω—É—Ç—å—Å—è", "–£–±–µ–∂–∞—Ç—å"],
    buttons_actions: [attack, dodge, goTown],
    text: `–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –±–æ–π.`,
  },
  {
    name: "–ú–æ–Ω—Å—Ç—Ä —É–±–∏—Ç",
    buttons_names: [
      "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥",
      "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥",
      "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥",
    ],
    buttons_actions: [goTown, goTown, goTown],
    text: "–ú–æ–Ω—Å—Ç—Ä —É–±–∏—Ç. –í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø—ã—Ç –∏ –∑–æ–ª–æ—Ç–æ!",
  },
  {
    name: "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ",
    buttons_names: ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    buttons_actions: [restart, restart, restart],
    text: "–ò–≥—Ä–æ–∫ —É–±–∏—Ç. ‚ò†Ô∏è",
  },
  {
    name: "–ü–æ–±–µ–¥–∞",
    buttons_names: ["–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"],
    buttons_actions: [restart, restart, restart],
    text: "–î—Ä–∞–∫–æ–Ω –ø–æ–≤–µ—Ä–∂–µ–Ω. –í—ã –ø–æ–±–µ–¥–∏–ª–∏! üèÜ",
  },
];

button1.textContent = locations[0].buttons_names[0];
button2.textContent = locations[0].buttons_names[1];
button3.textContent = locations[0].buttons_names[2];
button1.onclick = locations[0].buttons_actions[0];
button2.onclick = locations[0].buttons_actions[1];
button3.onclick = locations[0].buttons_actions[2];

playerNameText.innerText = player;
playerHPText.innerText = hp;
playerGoldText.innerText = gold;
playerXPText.innerText = xp;
playerLuckText.innerText = luck;
currentWeaponText.innerText = weapons[currentWeapon].name;

function update(location) {
  button1.innerText = location.buttons_names[0];
  button2.innerText = location.buttons_names[1];
  button3.innerText = location.buttons_names[2];
  button1.onclick = location.buttons_actions[0];
  button2.onclick = location.buttons_actions[1];
  button3.onclick = location.buttons_actions[2];
  monsterHealth = "?";
  monsterGold = "?";
  monsterLevel = "?";
  monsterImg.src = "/images/blank.jpg";
  monsterNameText.innerText = "???";
  monsterHealthText.innerText = monsterHealth;
  monsterGoldText.innerText = monsterGold;
  monsterLevelText.innerText = monsterLevel;
  gameLog.innerText += `\n${location.text}`;
  trimGameLog();
}

function goTown() {
  update(locations[0]);
}

function goShop() {
  update(locations[1]);
}

function goTavern() {
  update(locations[2]);
}

function goDungeon() {
  update(locations[3]);
}

function buyHealth() {
  if (gold >= 10) {
    gold -= 10;
    hp += 10;
    playerGoldText.innerText = gold;
    playerHPText.innerText = hp;
  } else {
    gameLog.innerText += `\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.`;
  }
  trimGameLog();
}

function buyWeapon() {
  if (currentWeapon < weapons.length - 1) {
    if (gold >= 50) {
      gold -= 50;
      currentWeapon++;
      playerGoldText.innerText = gold;
      currentWeaponText.innerText = weapons[currentWeapon].name;
      gameLog.innerText += `\n–í—ã –∫—É–ø–∏–ª–∏ ${weapons[currentWeapon].name}.`;
    } else {
      gameLog.innerText += `\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞.`;
    }
  } else {
    gameLog.innerText += `\n–£ –≤–∞—Å —É–∂–µ —Å–∞–º–æ–µ –º–æ—â–Ω–æ–µ –æ—Ä—É–∂–∏–µ.`;
    button2.innerText = "–ü—Ä–æ–¥–∞—Ç—å –æ—Ä—É–∂–∏–µ" + "\n" + "+25ü™ô";
    button2.onclick = sellWeapon;
  }
  trimGameLog();
}

function sellWeapon() {
  if (!isOldWeaponSold) {
    gold += 25;
    playerGoldText.innerText = gold;
    isOldWeaponSold = true;
    gameLog.innerText += `\n–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—ë —Å—Ç–∞—Ä–æ–µ –æ—Ä—É–∂–∏–µ –∑–∞ 25 –∑–æ–ª–æ—Ç–∞.`;
  } else {
    gameLog.innerText += `\n–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –æ—Ä—É–∂–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.`;
  }
  trimGameLog();
}

function drinkBeer() {
  const xpGain = Math.floor(Math.random() * 10) + 1;
  const hpLoss = Math.floor(Math.random() * 10) + 5;
  xp += xpGain;
  hp -= hpLoss;
  playerXPText.innerText = xp;
  playerHPText.innerText = hp;

  if (hp <= 0) {
    lose();
    return;
  }

  gameLog.innerText += `\n–í—ã –≤—ã–ø–∏–ª–∏ —ç–ª—è –∏ —É—Å–ª—ã—à–∞–ª–∏ –ø–∞—Ä—É –∑–∞–Ω—è—Ç–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π (+${xpGain} –æ–ø—ã—Ç–∞, -${hpLoss} –∑–¥–æ—Ä–æ–≤—å—è).`;
  trimGameLog();
}

function playCards() {
  const points = Math.floor(Math.random() * 16) + 1;

  if (points > gold) {
    gameLog.innerText += `\n–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–æ–ª–æ—Ç–∞.`;
    trimGameLog();
    return;
  }

  if (Math.random() >= 0.55) {
    gold += points;
    luck++;
    gameLog.innerText += `\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${points} –∑–æ–ª–æ—Ç–∞. +1 –∫ —É–¥–∞—á–µ.`;
  } else {
    gold -= points;
    luck--;
    gameLog.innerText += `\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${points} –∑–æ–ª–æ—Ç–∞. -1 –∫ —É–¥–∞—á–µ.`;
  }

  playerGoldText.innerText = gold;
  playerLuckText.innerText = luck;
  trimGameLog();
}

function fightGoblin() {
  update(locations[4]);
  updateEnemy(0);
  monsterImg.src = "images/goblin.jpg";
}

function fightElemental() {
  update(locations[4]);
  updateEnemy(1);
  monsterImg.src = "images/elemental.jpg";
}

function fightDragon() {
  update(locations[4]);
  updateEnemy(2);
  monsterImg.src = "images/dragon.jpg";
}

function updateEnemy(rank) {
  monsterHealth = monsters[rank].hp;
  monsterGold = monsters[rank].gold;
  monsterLevel = monsters[rank].level;
  monsterNameText.innerText = monsters[rank].name;
  monsterHealthText.innerText = monsterHealth;
  monsterGoldText.innerText = monsterGold;
  monsterLevelText.innerText = monsterLevel;
}

function attack() {
  let damage = calcPlayerDamage(
    xp,
    monsterLevel,
    weapons[currentWeapon].damage,
    luck
  );

  monsterHealth -= damage;
  hp -= Math.floor(Math.random() * 8) + monsterLevel;

  gameLog.innerText += `\n${monsterNameText.innerText} –∞—Ç–∞–∫—É–µ—Ç.`;
  gameLog.innerText += ` –í—ã –Ω–∞–Ω–æ—Å–∏—Ç–µ ${damage} —É—Ä–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é ${currentWeaponText.innerText}.`;
  trimGameLog();

  monsterHealthText.innerText = monsterHealth;
  playerHPText.innerText = hp;

  if (hp <= 0) {
    lose();
  } else if (monsterHealth <= 0) {
    if (monsterLevel === 25) {
      winGame();
    } else {
      defeatMonster();
    }
  }
}

function calcPlayerDamage(playerXP, monsterLvl, weaponDamage, luck) {
  return Math.max(
    1,
    Math.floor(
      weaponDamage +
        (playerXP || 1) / 5 +
        Math.random() * 10 +
        luck * 5 -
        monsterLvl * 0.7
    )
  );
}

function calcMonsterDamage() {
  return Math.floor(Math.random() * 8) + monsterLevel;
}

function dodge() {
  if (Math.random() >= (luck > 1 ? 0.45 : 0.55)) {
    const skillPoints = Math.floor(Math.random() * 3) + 1;
    xp += skillPoints;
    playerXPText.innerText = xp;
    gameLog.innerText += `\n–í—ã —É–≤–µ—Ä–Ω—É–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ ${skillPoints} –æ–ø—ã—Ç–∞.`;
  } else {
    hp -= calcMonsterDamage();
    playerHPText.innerText = hp;
    gameLog.innerText += `\n–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ —É–≤–µ—Ä–Ω—É—Ç—å—Å—è –æ—Ç –∞—Ç–∞–∫–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–Ω.`;
  }
  if (hp <= 0) {
    lose();
  }
  trimGameLog();
}

function defeatMonster() {
  const skillPoints = monsterLevel + Math.floor(Math.random() * monsterLevel);
  xp += skillPoints;
  gold += monsterGold + Math.floor(Math.random() * monsterGold) + 15;
  playerXPText.innerText = xp;
  playerGoldText.innerText = gold;
  update(locations[5]);
}

function lose() {
  update(locations[6]);
}

function winGame() {
  update(locations[7]);
}

function restart() {
  isOldWeaponSold = false;
  currentWeapon = 0;
  xp = 0;
  hp = 100;
  gold = 50;
  luck = 0;
  playerNameText.innerText = player;
  playerHPText.innerText = hp;
  playerGoldText.innerText = gold;
  playerXPText.innerText = xp;
  playerLuckText.innerText = luck;
  currentWeaponText.innerText = weapons[currentWeapon].name;
  goTown();
  gameLog.innerText =
    "–í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –ø—ã–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ —Å—Ç–∞—Ä–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç–µ—Å—å?";
}

function trimGameLog() {
  gameLog.innerText = gameLog.innerText.split("\n").slice(-14).join("\n");
}
